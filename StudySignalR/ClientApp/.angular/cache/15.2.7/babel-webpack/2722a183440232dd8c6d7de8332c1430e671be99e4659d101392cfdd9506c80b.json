{"ast":null,"code":"import * as signalR from \"@microsoft/signalr\";\nimport * as i0 from \"@angular/core\";\nexport class SignalrService {\n  constructor(baseUrl) {\n    this.chats = [];\n    this.messages = [];\n    this.startConnection = () => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl(this._baseUrl + 'chatHub', {\n        // skipNegotiation: true,\n        // transport: signalR.HttpTransportType.WebSockets\n      }).configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect().build();\n      this.hubConnection.start().then(() => console.log('Connection started')).catch(err => console.log('Error while starting connection: ' + err));\n    };\n    this.addGetMessageListener = () => {\n      this.hubConnection?.on('GetMessage', message => {\n        this.messages.push(message);\n        console.log(message);\n      });\n    };\n    this.addChatListener = () => {\n      this.hubConnection?.on('addchat', chat => {\n        this.chats.push(chat);\n        console.log(chat);\n      });\n    };\n    this._baseUrl = baseUrl.replace('https', 'wss');\n  }\n  subscribeOnChat(chatId) {\n    const connection = {\n      chatId: chatId\n    };\n    this.hubConnection?.invoke('joinToChat', connection);\n  }\n  cleanMessages() {\n    this.messages = [];\n  }\n}\nSignalrService.ɵfac = function SignalrService_Factory(t) {\n  return new (t || SignalrService)(i0.ɵɵinject('BASE_URL'));\n};\nSignalrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SignalrService,\n  factory: SignalrService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;;AAO7C,OAAM,MAAOC,cAAc;EAIzBC,YAAgCC,OAAe;IAIxC,UAAK,GAAiB,EAAE;IACxB,aAAQ,GAAmB,EAAE;IAE7B,oBAAe,GAAG,MAAK;MAC5B,IAAI,CAACC,aAAa,GAAG,IAAIJ,OAAO,CAACK,oBAAoB,EAAE,CACpDC,OAAO,CAAC,IAAI,CAACC,QAAQ,GAAG,SAAS,EAChC;QACE;QACA;MAAA,CACD,CAAC,CACHC,gBAAgB,CAACR,OAAO,CAACS,QAAQ,CAACC,KAAK,CAAC,CACxCC,sBAAsB,EAAE,CACxBC,KAAK,EAAE;MAEV,IAAI,CAACR,aAAa,CACfS,KAAK,EAAE,CACPC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAAC,mCAAmC,GAAGE,GAAG,CAAC,CAAC;IACzE,CAAC;IAEM,0BAAqB,GAAG,MAAK;MAClC,IAAI,CAACd,aAAa,EAAEe,EAAE,CAAC,YAAY,EAAGC,OAAO,IAAI;QAC/C,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC;QAC3BL,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IAOM,oBAAe,GAAG,MAAK;MAC5B,IAAI,CAAChB,aAAa,EAAEe,EAAE,CAAC,SAAS,EAAGI,IAAI,IAAI;QACzC,IAAI,CAACC,KAAK,CAACF,IAAI,CAACC,IAAI,CAAC;QACrBR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC;IAxCC,IAAI,CAAChB,QAAQ,GAAGJ,OAAO,CAACsB,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC;EACjD;EA6BOC,eAAe,CAAEC,MAAe;IACrC,MAAMC,UAAU,GAAG;MAAED,MAAM,EAAGA;IAAM,CAAE;IACtC,IAAI,CAACvB,aAAa,EAAEyB,MAAM,CAAC,YAAY,EAAED,UAAU,CAAC;EACtD;EASOE,aAAa;IAClB,IAAI,CAACT,QAAQ,GAAG,EAAE;EACpB;;AAjDWpB,cAAc;mBAAdA,cAAc,cAIL,UAAU;AAAA;AAJnBA,cAAc;SAAdA,cAAc;EAAA8B,SAAd9B,cAAc;EAAA+B,YAFb;AAAM","names":["signalR","SignalrService","constructor","baseUrl","hubConnection","HubConnectionBuilder","withUrl","_baseUrl","configureLogging","LogLevel","Debug","withAutomaticReconnect","build","start","then","console","log","catch","err","on","message","messages","push","chat","chats","replace","subscribeOnChat","chatId","connection","invoke","cleanMessages","factory","providedIn"],"sourceRoot":"","sources":["/Users/kirillturin/Desktop/StudySignalR/StudySignalR/ClientApp/src/app/services/signalr.service.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport * as signalR from \"@microsoft/signalr\"\nimport { ChatModel } from \"../Interfaces/ChatModel\"\nimport { MessageModel } from \"../Interfaces/MessageModel\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n  private hubConnection?: signalR.HubConnection | undefined;\n  private _baseUrl : string;\n\n  constructor(@Inject('BASE_URL') baseUrl: string) {\n    this._baseUrl = baseUrl.replace('https', 'wss');\n  }\n\n  public chats : ChatModel[] = [];\n  public messages: MessageModel[] = []\n\n  public startConnection = () => {\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this._baseUrl + 'chatHub',\n        {\n          // skipNegotiation: true,\n          // transport: signalR.HttpTransportType.WebSockets\n        })\n      .configureLogging(signalR.LogLevel.Debug)\n      .withAutomaticReconnect()\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log('Connection started'))\n      .catch(err => console.log('Error while starting connection: ' + err))\n  }\n\n  public addGetMessageListener = () => {\n    this.hubConnection?.on('GetMessage', (message) => {\n      this.messages.push(message);\n      console.log(message);\n    })\n  }\n\n  public subscribeOnChat (chatId : string) {\n    const connection = { chatId : chatId }\n    this.hubConnection?.invoke('joinToChat', connection);\n  }\n\n  public addChatListener = () => {\n    this.hubConnection?.on('addchat', (chat) => {\n      this.chats.push(chat);\n      console.log(chat)\n    })\n  }\n\n  public cleanMessages() {\n    this.messages = [];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}